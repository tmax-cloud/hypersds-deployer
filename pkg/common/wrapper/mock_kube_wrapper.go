// Code generated by MockGen. DO NOT EDIT.
// Source: kube_wrapper.go

// Package wrapper is a generated GoMock package.
package wrapper

import (
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
	reflect "reflect"
)

// MockKubeInterface is a mock of KubeInterface interface
type MockKubeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubeInterfaceMockRecorder
}

// MockKubeInterfaceMockRecorder is the mock recorder for MockKubeInterface
type MockKubeInterfaceMockRecorder struct {
	mock *MockKubeInterface
}

// NewMockKubeInterface creates a new mock instance
func NewMockKubeInterface(ctrl *gomock.Controller) *MockKubeInterface {
	mock := &MockKubeInterface{ctrl: ctrl}
	mock.recorder = &MockKubeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeInterface) EXPECT() *MockKubeInterfaceMockRecorder {
	return m.recorder
}

// InClusterConfig mocks base method
func (m *MockKubeInterface) InClusterConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InClusterConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InClusterConfig indicates an expected call of InClusterConfig
func (mr *MockKubeInterfaceMockRecorder) InClusterConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InClusterConfig", reflect.TypeOf((*MockKubeInterface)(nil).InClusterConfig))
}

// NewForConfig mocks base method
func (m *MockKubeInterface) NewForConfig(arg0 *rest.Config) (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewForConfig", arg0)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewForConfig indicates an expected call of NewForConfig
func (mr *MockKubeInterfaceMockRecorder) NewForConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewForConfig", reflect.TypeOf((*MockKubeInterface)(nil).NewForConfig), arg0)
}
