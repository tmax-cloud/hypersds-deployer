// Code generated by MockGen. DO NOT EDIT.
// Source: yaml_wrapper.go

package wrapper

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockYamlInterface is a mock of YamlInterface interface
type MockYamlInterface struct {
	ctrl     *gomock.Controller
	recorder *MockYamlInterfaceMockRecorder
}

// MockYamlInterfaceMockRecorder is the mock recorder for MockYamlInterface
type MockYamlInterfaceMockRecorder struct {
	mock *MockYamlInterface
}

// NewMockYamlInterface creates a new mock instance
func NewMockYamlInterface(ctrl *gomock.Controller) *MockYamlInterface {
	mock := &MockYamlInterface{ctrl: ctrl}
	mock.recorder = &MockYamlInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockYamlInterface) EXPECT() *MockYamlInterfaceMockRecorder {
	return _m.recorder
}

// Unmarshal mocks base method
func (_m *MockYamlInterface) Unmarshal(in []byte, out interface{}) error {
	ret := _m.ctrl.Call(_m, "Unmarshal", in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (_mr *MockYamlInterfaceMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unmarshal", reflect.TypeOf((*MockYamlInterface)(nil).Unmarshal), arg0, arg1)
}

// Marshal mocks base method
func (_m *MockYamlInterface) Marshal(in interface{}) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Marshal", in)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (_mr *MockYamlInterfaceMockRecorder) Marshal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Marshal", reflect.TypeOf((*MockYamlInterface)(nil).Marshal), arg0)
}
