// Code generated by MockGen. DO NOT EDIT.
// Source: host_spec.go

// This file is a generated GoMock file.
package node

import (
	gomock "github.com/golang/mock/gomock"
	wrapper "hypersds-provisioner/pkg/common/wrapper"
	reflect "reflect"
)

// MockHostSpecInterface is a mock of HostSpecInterface interface
type MockHostSpecInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHostSpecInterfaceMockRecorder
}

// MockHostSpecInterfaceMockRecorder is the mock recorder for MockHostSpecInterface
type MockHostSpecInterfaceMockRecorder struct {
	mock *MockHostSpecInterface
}

// NewMockHostSpecInterface creates a new mock instance
func NewMockHostSpecInterface(ctrl *gomock.Controller) *MockHostSpecInterface {
	mock := &MockHostSpecInterface{ctrl: ctrl}
	mock.recorder = &MockHostSpecInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostSpecInterface) EXPECT() *MockHostSpecInterfaceMockRecorder {
	return m.recorder
}

// SetServiceType mocks base method
func (m *MockHostSpecInterface) SetServiceType() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceType")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceType indicates an expected call of SetServiceType
func (mr *MockHostSpecInterfaceMockRecorder) SetServiceType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceType", reflect.TypeOf((*MockHostSpecInterface)(nil).SetServiceType))
}

// SetAddr mocks base method
func (m *MockHostSpecInterface) SetAddr(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddr", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAddr indicates an expected call of SetAddr
func (mr *MockHostSpecInterfaceMockRecorder) SetAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddr", reflect.TypeOf((*MockHostSpecInterface)(nil).SetAddr), addr)
}

// SetHostName mocks base method
func (m *MockHostSpecInterface) SetHostName(hostName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHostName", hostName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHostName indicates an expected call of SetHostName
func (mr *MockHostSpecInterfaceMockRecorder) SetHostName(hostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostName", reflect.TypeOf((*MockHostSpecInterface)(nil).SetHostName), hostName)
}

// SetLabels mocks base method
func (m *MockHostSpecInterface) SetLabels(labels []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabels", labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLabels indicates an expected call of SetLabels
func (mr *MockHostSpecInterfaceMockRecorder) SetLabels(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockHostSpecInterface)(nil).SetLabels), labels)
}

// AddLabels mocks base method
func (m *MockHostSpecInterface) AddLabels(labels ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLabels", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabels indicates an expected call of AddLabels
func (mr *MockHostSpecInterfaceMockRecorder) AddLabels(labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabels", reflect.TypeOf((*MockHostSpecInterface)(nil).AddLabels), labels...)
}

// SetStatus mocks base method
func (m *MockHostSpecInterface) SetStatus(status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockHostSpecInterfaceMockRecorder) SetStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockHostSpecInterface)(nil).SetStatus), status)
}

// GetServiceType mocks base method
func (m *MockHostSpecInterface) GetServiceType() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceType indicates an expected call of GetServiceType
func (mr *MockHostSpecInterfaceMockRecorder) GetServiceType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceType", reflect.TypeOf((*MockHostSpecInterface)(nil).GetServiceType))
}

// GetHostName mocks base method
func (m *MockHostSpecInterface) GetHostName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostName indicates an expected call of GetHostName
func (mr *MockHostSpecInterfaceMockRecorder) GetHostName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostName", reflect.TypeOf((*MockHostSpecInterface)(nil).GetHostName))
}

// GetAddr mocks base method
func (m *MockHostSpecInterface) GetAddr() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddr indicates an expected call of GetAddr
func (mr *MockHostSpecInterfaceMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockHostSpecInterface)(nil).GetAddr))
}

// GetLabels mocks base method
func (m *MockHostSpecInterface) GetLabels() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels
func (mr *MockHostSpecInterfaceMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockHostSpecInterface)(nil).GetLabels))
}

// GetStatus mocks base method
func (m *MockHostSpecInterface) GetStatus() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockHostSpecInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockHostSpecInterface)(nil).GetStatus))
}

// MakeYmlFile mocks base method
func (m *MockHostSpecInterface) MakeYmlFile(yamlWrapper wrapper.YamlInterface, ioUtilWrapper wrapper.IoUtilInterface, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeYmlFile", yamlWrapper, ioUtilWrapper, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeYmlFile indicates an expected call of MakeYmlFile
func (mr *MockHostSpecInterfaceMockRecorder) MakeYmlFile(yamlWrapper, ioUtilWrapper, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeYmlFile", reflect.TypeOf((*MockHostSpecInterface)(nil).MakeYmlFile), yamlWrapper, ioUtilWrapper, fileName)
}
