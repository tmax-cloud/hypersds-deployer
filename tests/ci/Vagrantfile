#!/usr/bin/ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

$OS = "ubuntu/bionic64"
$username = "ceph"
$password = "cephceph"
$ips = ["192.168.99.111", "192.168.99.112", "192.168.99.113"]
$hdds = ["./disk1.vdi", "./disk2.vdi", "./disk3.vdi"]

Vagrant.configure("2") do |config|
  config.vm.provision :shell, 
    privileged: true, 
    inline: <<-SHELL
      useradd #$username -p $(openssl passwd -1 #$password) -m --groups sudo -s /bin/bash
      sed -i 's/\#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
      sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
      systemctl restart sshd
      echo "#$password\n#$password\n" | passwd
      mkdir -p /working/config
    SHELL

  (1..$ips.length).each do |i|
    config.vm.define "node#{i}" do |node|
      node.vm.hostname = "node#{i}"
      node.vm.box = $OS
      node.vm.network "private_network", ip: $ips[i-1]
      node.disksize.size = "20GB"
      node.vm.provider :virtualbox do |vb|
        vb.cpus = 2
        vb.memory = "2048"
        unless File.exist?($hdds[i-1])
          vb.customize ['createhd', '--filename', $hdds[i-1], '--size', 20 * 1024]
        end
        vb.customize ['storageattach', :id, 
          '--storagectl', 'SCSI' , '--port', 2, '--device', 0,
          '--type', 'hdd', '--medium', $hdds[i-1]]
      end
    end
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
